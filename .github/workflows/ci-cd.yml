name: Pine2Py CryptoLab CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    name: Test Backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements_enhanced.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_enhanced.txt

    - name: Run backend tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        python -m pytest tests/ -v --tb=short

    - name: Test API endpoints
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        python -c "
        import requests
        import time
        import subprocess
        import signal
        import os
        
        # Start server in background
        proc = subprocess.Popen(['python', '-m', 'api.server'], 
                              env=dict(os.environ, PORT='5001'))
        time.sleep(10)
        
        try:
            # Test health endpoint
            response = requests.get('http://localhost:5001/')
            assert response.status_code == 200
            print('âœ… Health endpoint working')
            
            # Test market data endpoint
            response = requests.get('http://localhost:5001/api/market/status')
            assert response.status_code == 200
            print('âœ… Market data endpoint working')
            
            # Test backtest engine
            response = requests.get('http://localhost:5001/api/backtests/health')
            assert response.status_code == 200
            print('âœ… Backtest engine working')
            
        finally:
            proc.terminate()
            proc.wait()
        "

  test-frontend:
    runs-on: ubuntu-latest
    name: Test Frontend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Test frontend build
      run: |
        ls -la dist/
        test -f dist/index.html
        echo "âœ… Frontend build successful"

  build-and-test-docker:
    runs-on: ubuntu-latest
    name: Build and Test Docker Images
    needs: [test-backend, test-frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      run: |
        docker build -f Dockerfile.backend -t pineopt-backend:test .

    - name: Build frontend image
      run: |
        docker build -f Dockerfile.frontend -t pineopt-frontend:test .

    - name: Test Docker Compose
      run: |
        cp .env.production .env
        docker-compose -f docker-compose.yml config
        echo "âœ… Docker Compose configuration valid"

    - name: Run integration test
      run: |
        # Start services
        docker-compose up -d backend
        sleep 30
        
        # Test backend health
        curl -f http://localhost:5001/ || exit 1
        echo "âœ… Backend container working"
        
        # Cleanup
        docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [test-backend, test-frontend, build-and-test-docker, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploy step would go here"
        echo "This could include:"
        echo "- Docker image push to registry"
        echo "- Deploy to staging environment"
        echo "- Run smoke tests"
        echo "- Notify team"