name: PineOpt Epic 7 - Production CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  API_PORT: '5007'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    name: Test Backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements_enhanced.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_enhanced.txt

    - name: Run backend tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd):$(pwd)/backend"
        python -m pytest backend/tests/ -v --tb=short

    - name: Test Epic 7 API endpoints
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd):$(pwd)/backend"
        cd backend/api
        python -c "
        import requests
        import time
        import subprocess
        import signal
        import os
        
        # Start Epic 7 server in background
        proc = subprocess.Popen(['python3', 'app.py'], 
                              env=dict(os.environ, PORT='${{ env.API_PORT }}'))
        time.sleep(15)  # More time for monitoring system initialization
        
        try:
            # Test health endpoint
            response = requests.get('http://localhost:${{ env.API_PORT }}/api/health')
            assert response.status_code == 200
            print('‚úÖ Epic 7 health endpoint working')
            
            # Test API info endpoint
            response = requests.get('http://localhost:${{ env.API_PORT }}/api')
            assert response.status_code == 200
            print('‚úÖ API info endpoint working')
            
            # Test market data endpoint
            response = requests.get('http://localhost:${{ env.API_PORT }}/api/v1/market/overview', timeout=30)
            print(f'Market endpoint status: {response.status_code}')
            
            # Test monitoring endpoints
            response = requests.get('http://localhost:${{ env.API_PORT }}/api/v1/monitoring/summary', timeout=30)
            print(f'Monitoring endpoint status: {response.status_code}')
            
            # Test strategy endpoint
            response = requests.get('http://localhost:${{ env.API_PORT }}/api/v1/strategies', timeout=30)
            print(f'Strategy endpoint status: {response.status_code}')
            
            print('‚úÖ Epic 7 API endpoints tested successfully')
            
        finally:
            proc.terminate()
            proc.wait()
        "

  test-frontend:
    runs-on: ubuntu-latest
    name: Test Frontend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Test frontend build
      run: |
        ls -la dist/
        test -f dist/index.html
        echo "‚úÖ Frontend build successful"

  build-and-test-docker:
    runs-on: ubuntu-latest
    name: Build and Test Docker Images
    needs: [test-backend, test-frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Epic 7 backend image
      run: |
        docker build -f deployment/docker/Dockerfile.backend -t pineopt-backend:test .

    - name: Build Epic 7 frontend image
      run: |
        docker build -f deployment/docker/Dockerfile.frontend -t pineopt-frontend:test .

    - name: Test Docker Compose configuration
      run: |
        cp .env.production .env
        cd deployment/docker
        docker-compose -f docker-compose.yml config
        echo "‚úÖ Docker Compose configuration valid"

    - name: Run Epic 7 integration test
      run: |
        cd deployment/docker
        # Start backend service only for testing
        docker-compose up -d backend
        sleep 45  # More time for Epic 7 monitoring initialization
        
        # Test Epic 7 backend health
        curl -f http://localhost:5007/api/health || exit 1
        echo "‚úÖ Epic 7 backend container working"
        
        # Test monitoring endpoints
        curl -f http://localhost:5007/api/v1/monitoring/summary || echo "‚ö†Ô∏è Monitoring endpoint not ready"
        
        # Cleanup
        docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    name: Deploy Epic 7 Production
    needs: [test-backend, test-frontend, build-and-test-docker, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub (Optional)
      if: ${{ secrets.DOCKER_USERNAME }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and tag production images
      run: |
        # Build production images with proper tags
        docker build -f deployment/docker/Dockerfile.backend -t pineopt-backend:latest -t pineopt-backend:v7.0 .
        docker build -f deployment/docker/Dockerfile.frontend -t pineopt-frontend:latest -t pineopt-frontend:v7.0 .
        echo "‚úÖ Production images built"

    - name: Push to registry (Optional)
      if: ${{ secrets.DOCKER_USERNAME }}
      run: |
        docker tag pineopt-backend:latest ${{ secrets.DOCKER_USERNAME }}/pineopt-backend:latest
        docker tag pineopt-frontend:latest ${{ secrets.DOCKER_USERNAME }}/pineopt-frontend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/pineopt-backend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/pineopt-frontend:latest
        echo "‚úÖ Images pushed to registry"

    - name: Deploy to production environment
      run: |
        echo "üöÄ Deploying Epic 7 to production..."
        
        # Create production deployment directory
        mkdir -p epic7-deploy
        cp -r deployment/ epic7-deploy/
        cp .env.production epic7-deploy/.env
        cd epic7-deploy/docker
        
        # Deploy with production configuration
        docker-compose down || true
        docker-compose up -d --build
        
        echo "‚è≥ Waiting for services to be ready..."
        sleep 60
        
        # Production health checks
        echo "üîç Running production health checks..."
        
        # Backend health check
        curl -f http://localhost:5007/api/health || exit 1
        echo "‚úÖ Backend health check passed"
        
        # API functionality check
        curl -f http://localhost:5007/api || exit 1  
        echo "‚úÖ API info endpoint working"
        
        # Monitoring system check
        curl -f http://localhost:5007/api/v1/monitoring/summary || echo "‚ö†Ô∏è Monitoring needs attention"
        
        # Frontend health check
        curl -f http://localhost:3000/health || exit 1
        echo "‚úÖ Frontend health check passed"
        
        echo "üéâ Epic 7 deployment successful!"

    - name: Run smoke tests
      run: |
        echo "üß™ Running production smoke tests..."
        
        # Test key Epic 7 features
        python -c "
        import requests
        import time
        
        base_url = 'http://localhost:5007'
        
        # Test market data
        try:
            response = requests.get(f'{base_url}/api/v1/market/overview', timeout=30)
            print(f'Market data: {response.status_code}')
        except:
            print('‚ö†Ô∏è Market data endpoint timeout')
        
        # Test monitoring dashboard
        try:
            response = requests.get(f'{base_url}/api/v1/monitoring/summary', timeout=30)
            print(f'Monitoring: {response.status_code}')
        except:
            print('‚ö†Ô∏è Monitoring endpoint timeout')
            
        # Test documentation
        try:
            response = requests.get(f'{base_url}/docs/', timeout=30)
            print(f'Documentation: {response.status_code}')
        except:
            print('‚ö†Ô∏è Documentation endpoint timeout')
            
        print('‚úÖ Smoke tests completed')
        "

    - name: Notify deployment success
      run: |
        echo "üì¢ Epic 7 deployment notification:"
        echo "‚úÖ PineOpt Epic 7 successfully deployed to production"
        echo "üåê Frontend: http://localhost:3000"
        echo "üîß API: http://localhost:5007/api"
        echo "üìä Monitoring: http://localhost:5007/api/v1/monitoring/summary"
        echo "üìö Docs: http://localhost:5007/docs/"
        echo "üéØ All Sprint 3 features active: Testing, Documentation, Performance, Monitoring"