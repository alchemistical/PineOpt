version: '3.8'

services:
  backend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.backend
    container_name: pineopt-backend
    ports:
      - "5007:5007"
    environment:
      - FLASK_ENV=production
      - API_PORT=5007
      - PYTHONPATH=/app:/app/backend
      - DATABASE_URL=sqlite:///app/database/pineopt_unified.db
      - ENABLE_MONITORING=true
      - ENABLE_CACHING=true
      - ENABLE_RATE_LIMITING=true
      - LOG_LEVEL=INFO
    volumes:
      - ../../database:/app/database
      - ../../outputs:/app/outputs
      - ../../uploads:/app/uploads
      - backend_logs:/app/logs
      - monitoring_data:/app/monitoring
    networks:
      - pineopt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5007/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.frontend
    container_name: pineopt-frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://localhost:5007/api
    networks:
      - pineopt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Optional: Database service for production
  redis:
    image: redis:7-alpine
    container_name: pineopt-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pineopt-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring with lightweight metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pineopt-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - pineopt-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  backend_logs:
  redis_data:
  prometheus_data:

networks:
  pineopt-network:
    driver: bridge