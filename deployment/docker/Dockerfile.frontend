# Multi-stage build for React frontend
# Epic 7 - Production Ready Frontend

# Build stage
FROM node:18-alpine as build

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache git curl

# Copy package files first for better caching
COPY package*.json ./

# Install all dependencies for build
RUN npm ci --silent

# Copy source code and configuration files
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./
COPY vite.config.ts ./
COPY tsconfig.json ./
COPY tsconfig.node.json ./
COPY tailwind.config.js ./
COPY postcss.config.js ./

# Set production environment
ENV NODE_ENV=production
ENV VITE_API_BASE_URL=http://localhost:5007/api

# Build the application with optimizations
RUN npm run build

# Verify build output
RUN ls -la dist/ && test -f dist/index.html

# Production stage
FROM nginx:alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built assets from build stage
COPY --from=build /app/dist /usr/share/nginx/html

# Copy nginx configuration (updated for Epic 7 backend port)
COPY deployment/nginx/nginx.conf /etc/nginx/nginx.conf

# Create nginx user and set permissions
RUN addgroup -g 101 -S nginx && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Expose port
EXPOSE 80

# Health check (updated endpoint)
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD curl -f http://localhost/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]