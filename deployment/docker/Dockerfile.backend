# Multi-stage Backend Dockerfile for PineOpt API Server
# Epic 7 - Production Ready with Monitoring & Performance Optimization

# Build stage
FROM python:3.11-slim as builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt requirements_enhanced.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir --user -r requirements_enhanced.txt

# Production stage
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    sqlite3 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoremove -y \
    && apt-get clean

# Copy Python packages from builder stage
COPY --from=builder /root/.local /root/.local

# Copy the application code
COPY backend/ ./backend/
COPY requirements.txt requirements_enhanced.txt ./
COPY .env.production ./.env.example

# Create necessary directories with proper permissions
RUN mkdir -p /app/database /app/outputs/{logs,datasets,reports} /app/uploads/strategies /app/monitoring

# Set Python path and environment variables
ENV PYTHONPATH="${PYTHONPATH}:/app:/app/backend"
ENV PATH="/root/.local/bin:$PATH"
ENV FLASK_ENV=production
ENV API_PORT=5007

# Create non-root user for security
RUN useradd -m -s /bin/bash pineopt && \
    chown -R pineopt:pineopt /app && \
    chmod -R 755 /app

# Switch to non-root user
USER pineopt

# Expose port (Updated for Epic 7 - port 5007)
EXPOSE 5007

# Health check (Updated for Epic 7 architecture)
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
  CMD curl -f http://localhost:5007/api/health || exit 1

# Production startup with Epic 7 app.py
CMD ["python3", "-m", "backend.api.app"]