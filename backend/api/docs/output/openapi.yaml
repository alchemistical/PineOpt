openapi: 3.0.3
info:
  title: 'PineOpt API - Epic 7: API Architecture Rationalization'
  version: 1.0.0
  description: "\n# PineOpt API Documentation\n\n**Epic 7: API Architecture Rationalization**\
    \ - Complete API reference for the consolidated PineOpt trading strategy platform.\n\
    \n## Features\n- **Consolidated Architecture**: 5 unified blueprints replacing\
    \ 13+ scattered route files\n- **Production Middleware**: Rate limiting, error\
    \ handling, logging, and CORS\n- **Standardized Responses**: Consistent JSON format\
    \ across all endpoints\n- **Health Monitoring**: Comprehensive service health\
    \ checks\n- **Strategy Management**: Pine Script conversion and backtesting\n\n\
    ## Architecture Overview\nThis API follows a microservice-inspired blueprint architecture\
    \ with production-ready middleware:\n- **Health Services**: System monitoring\
    \ and status\n- **Market Data Services**: Real-time and historical market data\n\
    - **Strategy Services**: Strategy CRUD operations and validation\n- **Conversion\
    \ Services**: Pine Script to Python conversion\n- **Backtesting Services**: Strategy\
    \ performance analysis\n\n## Authentication\nCurrently in development mode. Production\
    \ authentication will be added in future sprints.\n\n## Rate Limiting\n- **Global\
    \ Limits**: 100 requests/minute, 2000 requests/hour per client\n- **Headers**:\
    \ Rate limit info included in response headers\n- **Bypass**: Health check endpoints\
    \ excluded from rate limiting\n\n## Error Handling\nAll errors return standardized\
    \ JSON format with:\n- **Timestamp**: ISO 8601 timestamp\n- **Error Type**: Categorized\
    \ error type\n- **Request Info**: Method, path, and endpoint context\n- **Epic\
    \ Context**: Epic 7 project identification\n            "
  termsOfService: https://pineopt.dev/terms
  contact:
    name: PineOpt API Support
    url: https://pineopt.dev/support
    email: support@pineopt.dev
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
servers:
- url: http://localhost:5007
  description: Development Server
- url: https://api.pineopt.dev
  description: Production Server
- url: https://staging-api.pineopt.dev
  description: Staging Server
paths:
  /api/v1/health/:
    get:
      tags:
      - Health
      summary: Basic health check
      description: Returns basic service health status
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
              example:
                $ref: '#/components/examples/HealthResponse'
  /api/v1/health/detailed:
    get:
      tags:
      - Health
      summary: Detailed health check
      description: Returns detailed system health metrics including CPU, memory, and
        database status
      responses:
        '200':
          $ref: '#/components/responses/200Success'
        '500':
          $ref: '#/components/responses/500InternalError'
  /api/v1/health/metrics:
    get:
      tags:
      - Health
      summary: Performance metrics
      description: Returns API performance metrics (placeholder - will be implemented
        in Sprint 3)
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/market/:
    get:
      tags:
      - Market Data
      summary: Market data API information
      description: Returns available market data endpoints and capabilities
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/strategies/:
    get:
      tags:
      - Strategies
      summary: Strategy management API information
      description: Returns available strategy management endpoints
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/strategies/list:
    get:
      tags:
      - Strategies
      summary: List all strategies
      description: Returns paginated list of all strategies
      parameters:
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
          default: 1
      - name: per_page
        in: query
        description: Items per page
        schema:
          type: integer
          default: 20
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/strategies/{id}:
    get:
      tags:
      - Strategies
      summary: Get strategy by ID
      description: Returns detailed strategy information
      parameters:
      - $ref: '#/components/parameters/StrategyId'
      responses:
        '200':
          $ref: '#/components/responses/200Success'
        '404':
          $ref: '#/components/responses/404NotFound'
    put:
      tags:
      - Strategies
      summary: Update strategy
      description: Updates an existing strategy
      parameters:
      - $ref: '#/components/parameters/StrategyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Strategy'
      responses:
        '200':
          $ref: '#/components/responses/200Success'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422ValidationError'
    delete:
      tags:
      - Strategies
      summary: Delete strategy
      description: Deletes a strategy by ID
      parameters:
      - $ref: '#/components/parameters/StrategyId'
      responses:
        '200':
          $ref: '#/components/responses/200Success'
        '404':
          $ref: '#/components/responses/404NotFound'
  /api/v1/conversions/:
    get:
      tags:
      - Conversions
      summary: Conversion API information
      description: Returns available Pine Script conversion endpoints and capabilities
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/conversions/health:
    get:
      tags:
      - Conversions
      summary: Conversion service health
      description: Returns health status of conversion services
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/conversions/analyze:
    post:
      tags:
      - Conversions
      summary: Analyze Pine Script strategy
      description: Analyzes Pine Script code and provides insights
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pine_code:
                  type: string
                  description: Pine Script source code
              required:
              - pine_code
            example:
              pine_code: "//@version=5\nstrategy(\"Test Strategy\", overlay=true)\n\
                sma = ta.sma(close, 20)\nif close > sma\n    strategy.entry(\"Long\"\
                , strategy.long)"
      responses:
        '200':
          $ref: '#/components/responses/200Success'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422ValidationError'
        '503':
          description: AI analysis service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/conversions/convert/working:
    post:
      tags:
      - Conversions
      summary: Convert Pine Script (working converter)
      description: Converts Pine Script to Python using the working converter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pine_code:
                  type: string
                target_format:
                  type: string
                  default: python
              required:
              - pine_code
      responses:
        '200':
          $ref: '#/components/responses/200Success'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '503':
          description: Conversion service unavailable
  /api/v1/conversions/indicators:
    get:
      tags:
      - Conversions
      summary: List available indicators
      description: Returns list of supported technical indicators for conversion
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/backtests/:
    get:
      tags:
      - Backtests
      summary: Backtest API information
      description: Returns available backtesting endpoints and capabilities
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/backtests/health:
    get:
      tags:
      - Backtests
      summary: Backtest service health
      description: Returns health status of backtesting services
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/backtests/run:
    post:
      tags:
      - Backtests
      summary: Run strategy backtest
      description: Executes backtest for a given strategy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                strategy_id:
                  type: string
                  description: Strategy identifier
                symbol:
                  type: string
                  description: Trading pair symbol
                timeframe:
                  type: string
                  description: Timeframe (1m, 5m, 1h, 1d, etc.)
                start_date:
                  type: string
                  format: date
                  description: Backtest start date
                end_date:
                  type: string
                  format: date
                  description: Backtest end date
                initial_capital:
                  type: number
                  description: Initial capital amount
              required:
              - strategy_id
              - symbol
              - timeframe
            example:
              strategy_id: test_strategy
              symbol: BTCUSDT
              timeframe: 1h
              start_date: '2024-01-01'
              end_date: '2024-12-31'
              initial_capital: 10000
      responses:
        '200':
          description: Backtest results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestResult'
        '404':
          description: Strategy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          $ref: '#/components/responses/422ValidationError'
  /api/v1/backtests/pairs/available:
    get:
      tags:
      - Backtests
      summary: List available trading pairs
      description: Returns list of available trading pairs for backtesting
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/backtests/history:
    get:
      tags:
      - Backtests
      summary: Backtest history
      description: Returns history of previous backtests
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/rate-limit/status:
    get:
      tags:
      - Middleware
      summary: Rate limit status
      description: Returns current rate limiting status for the client
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/cors/config:
    get:
      tags:
      - Middleware
      summary: CORS configuration
      description: Returns current CORS configuration
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/cors/test:
    get:
      tags:
      - Middleware
      summary: CORS functionality test
      description: Test endpoint for CORS functionality validation
      responses:
        '200':
          $ref: '#/components/responses/200Success'
  /api/v1/logs/config:
    get:
      tags:
      - Middleware
      summary: Logging configuration
      description: Returns current logging middleware configuration
      responses:
        '200':
          $ref: '#/components/responses/200Success'
components:
  schemas:
    StandardResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp of response
        epic:
          type: string
          example: Epic 7 - API Architecture Rationalization
          description: Epic project identifier
        status:
          type: string
          enum:
          - success
          - error
          - healthy
          - unhealthy
          description: Response status
        request_info:
          $ref: '#/components/schemas/RequestInfo'
      required:
      - timestamp
      - epic
      - status
    SuccessResponse:
      allOf:
      - $ref: '#/components/schemas/StandardResponse'
      - type: object
        properties:
          data:
            description: Response data
          message:
            type: string
            description: Optional success message
          meta:
            type: object
            description: Optional metadata
        required:
        - data
    ErrorResponse:
      allOf:
      - $ref: '#/components/schemas/StandardResponse'
      - type: object
        properties:
          error:
            $ref: '#/components/schemas/ErrorInfo'
        required:
        - error
    ErrorInfo:
      type: object
      properties:
        type:
          type: string
          description: Error type identifier
        message:
          type: string
          description: Human-readable error message
        status_code:
          type: integer
          description: HTTP status code
        details:
          description: Additional error details
        suggestion:
          type: string
          description: Suggested resolution
      required:
      - type
      - message
      - status_code
    RequestInfo:
      type: object
      properties:
        method:
          type: string
          description: HTTP method
        path:
          type: string
          description: Request path
        endpoint:
          type: string
          description: Flask endpoint name
    HealthCheck:
      type: object
      properties:
        service:
          type: string
          description: Service name
        status:
          type: string
          enum:
          - healthy
          - unhealthy
          description: Service health status
        version:
          type: string
          description: Service version
        health_checks:
          type: object
          description: Detailed health check results
    Strategy:
      type: object
      properties:
        id:
          type: string
          description: Unique strategy identifier
        name:
          type: string
          description: Strategy name
        description:
          type: string
          description: Strategy description
        pine_code:
          type: string
          description: Pine Script source code
        parameters:
          type: object
          description: Strategy parameters
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    BacktestResult:
      type: object
      properties:
        backtest_id:
          type: string
          description: Unique backtest identifier
        strategy_id:
          type: string
          description: Strategy identifier
        performance_metrics:
          $ref: '#/components/schemas/PerformanceMetrics'
        equity_curve:
          type: array
          items:
            type: number
          description: Equity curve data points
    PerformanceMetrics:
      type: object
      properties:
        total_return:
          type: number
          description: Total return percentage
        annual_return:
          type: number
          description: Annualized return percentage
        sharpe_ratio:
          type: number
          description: Risk-adjusted return ratio
        max_drawdown:
          type: number
          description: Maximum drawdown percentage
        win_rate:
          type: number
          description: Win rate (0-1)
        total_trades:
          type: integer
          description: Total number of trades
        profit_factor:
          type: number
          description: Profit factor ratio
  responses:
    200Success:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    400BadRequest:
      description: Bad request - Invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    422ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    429RateLimit:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      headers:
        X-RateLimit-Limit-Minute:
          $ref: '#/components/headers/RateLimitMinute'
        X-RateLimit-Remaining-Minute:
          $ref: '#/components/headers/RateLimitRemaining'
    500InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  parameters:
    StrategyId:
      name: id
      in: path
      required: true
      description: Strategy identifier
      schema:
        type: string
    BacktestId:
      name: id
      in: path
      required: true
      description: Backtest identifier
      schema:
        type: string
  examples:
    HealthResponse:
      value:
        timestamp: '2025-08-23T10:53:24.509186'
        epic: Epic 7 - API Architecture Rationalization
        status: healthy
        service: PineOpt API
        version: v1
        request_info:
          method: GET
          path: /api/v1/health/
          endpoint: health.basic_health
    ErrorResponse:
      value:
        timestamp: '2025-08-23T10:53:52.039846'
        epic: Epic 7 - API Architecture Rationalization
        status: error
        error:
          type: not_found
          message: Endpoint /nonexistent not found
          status_code: 404
        request_info:
          method: GET
          path: /nonexistent
          endpoint: null
  headers:
    RateLimitMinute:
      description: Requests allowed per minute
      schema:
        type: integer
    RateLimitRemaining:
      description: Requests remaining this minute
      schema:
        type: integer
    RequestId:
      description: Unique request identifier
      schema:
        type: string
    ResponseTime:
      description: Response time in milliseconds
      schema:
        type: string
tags:
- name: Health
  description: System health monitoring and status endpoints
- name: Market Data
  description: Real-time and historical market data services
- name: Strategies
  description: Strategy management, validation, and CRUD operations
- name: Conversions
  description: Pine Script to Python conversion services
- name: Backtests
  description: Strategy backtesting and performance analysis
- name: Middleware
  description: Rate limiting, logging, and CORS configuration endpoints
